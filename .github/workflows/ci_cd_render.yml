# .github/workflows/ci-cd.yml
name: CI/CD CineNocturne API

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_run:
    workflows: ["train-model"]   # Nom exact du workflow train
    types: [completed]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout complet
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Crée le dossier model si absent
      - name: Ensure model directory exists
        run: mkdir -p E3_E4_API_app/model

      # 3) Télécharger le dernier artefact disponible pour trained-models
      - name: Download trained models
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: "train-model"
          name: trained-models
          path: E3_E4_API_app/model
          # Le plugin va chercher automatiquement le dernier run complet

      # 4) Debug : liste fichiers téléchargés
      - name: Debug downloaded artifact
        run: |
          echo "Contenu du dossier model après téléchargement :"
          ls -lhR E3_E4_API_app/model
          cnt=$(ls E3_E4_API_app/model/*.joblib 2>/dev/null | wc -l)
          if [ "$cnt" -eq 0 ]; then
            echo "::error::Aucun fichier .joblib trouvé dans le dossier model !"
            exit 1
          fi

      # 5) Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      # 6) Installer dépendances
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      # 7) Lancer tests
      - name: Run tests
        run: | 
          export PYTHONPATH=$PYTHONPATH:$(pwd)/E3_E4_API_app
          export API_USERNAME=${{ secrets.API_USERNAME }}
          export API_PASSWORD=${{ secrets.API_PASSWORD }}
          export API_TOKEN=${{ secrets.API_TOKEN }}
          export USER_LOU=${{ secrets.USER_LOU }}
          export USER_MAX=${{ secrets.USER_MAX }}
          pytest E3_E4_API_app/tests --maxfail=1 --disable-warnings -q

      # 8) Vérifier modèles présents
      - name: Verify model exists
        run: |
          echo "Vérification des fichiers .joblib :"
          ls -lh E3_E4_API_app/model || exit 1

      # 9) Déploiement Render
      - name: Deploy to Render
        if: success() && github.event_name == 'push'
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST "https://api.render.com/deploy/srv-d2nhlbe3jp1c73cmfa00?key=T6klWYggy2c" \
            -H "Authorization: Bearer $RENDER_API_KEY"