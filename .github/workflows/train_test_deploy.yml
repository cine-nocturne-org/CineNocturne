# .github/workflows/train_test_deploy.yml
name: Train-Test-Deploy CineNocturne

on:
  workflow_run:
    workflows: ["Run scrapping every night"]
    types:
      - completed
  workflow_dispatch: {}  # Permet lancement manuel

permissions:
  contents: write

concurrency:
  group: cine-nocturne
  cancel-in-progress: true

jobs:
  train-test-deploy:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Setup Python
      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3) Cache pip
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4) Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install papermill jupyter shap pytest || true

      # 5) Train model
      - name: Train model
        env:
          MYSQL_URL: ${{ secrets.MYSQL_URL }}
        run: |
          papermill E3_E4_API_app/model_reco.ipynb E3_E4_API_app/model_reco.out.ipynb

      # 6) Debug : vérifier fichiers modèles
      - name: List model files
        run: |
          echo "Fichiers modèles générés :"
          ls -lh E3_E4_API_app/model || exit 1

      # 7) Run tests
      - name: Run tests
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/E3_E4_API_app
          export API_USERNAME=${{ secrets.API_USERNAME }}
          export API_PASSWORD=${{ secrets.API_PASSWORD }}
          export API_TOKEN=${{ secrets.API_TOKEN }}
          export USER_LOU=${{ secrets.USER_LOU }}
          export USER_MAX=${{ secrets.USER_MAX }}
          pytest E3_E4_API_app/tests --maxfail=1 --disable-warnings -q

      # 8) Deploy to Render
      - name: Deploy to Render
        if: success()
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST "https://api.render.com/deploy/srv-d2nhlbe3jp1c73cmfa00" \
            -H "Authorization: Bearer $RENDER_API_KEY"