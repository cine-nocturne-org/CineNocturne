# .github/workflows/train_test_deploy.yml
name: Train-Test-Deploy CineNocturne

on:
  workflow_run:
    workflows: ["Run scrapping every night"]
    types:
      - completed
  workflow_dispatch: {}  # Permet lancement manuel

permissions:
  contents: write

concurrency:
  group: cine-nocturne
  cancel-in-progress: true

jobs:
  train-test-deploy:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout avec LFS
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      # 2) Setup Python
      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3) Cache pip
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4) Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install papermill jupyter shap pytest || true

      # 5) Clean old models
      - name: Clean old models
        run: rm -f E3_E4_API_app/model/*.joblib

      # 6) Train model
      - name: Train model
        env:
          MYSQL_URL: ${{ secrets.MYSQL_URL }}
        run: |
          papermill E3_E4_API_app/model_reco.ipynb E3_E4_API_app/model_reco.out.ipynb

      # 7) Commit LFS models (robuste + ident + debug)
      - name: Commit LFS models
        run: |
          set -e
      
          echo "==[CHECK OUTPUT]=="
          ls -lah E3_E4_API_app/model || (echo "Dossier model manquant" && exit 1)
          test "$(ls -1 E3_E4_API_app/model/*.joblib 2>/dev/null | wc -l)" -ge 1 || (echo "Aucun .joblib généré" && exit 1)
      
          echo "==[GIT IDENTITY]=="
          git config --local user.name  "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
      
          echo "==[LFS INSTALL + TRACK]=="
          git lfs version
          git lfs install --local
          # Assure le tracking des .joblib (idempotent)
          if ! grep -q "\*.joblib filter=lfs" .gitattributes 2>/dev/null; then
            echo "*.joblib filter=lfs diff=lfs merge=lfs -text" >> .gitattributes
            git add .gitattributes
          fi
      
          echo "==[ADD MODELS]=="
          # Force add au cas où un .gitignore exclut le dossier
          git add -f E3_E4_API_app/model/*.joblib
      
          echo "==[STATUS]=="
          git status --porcelain
      
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Update models $(date -u +%F_%H-%M-%S) [skip ci]"
            echo "==[PUSH]=="
            GIT_TRACE=1 GIT_CURL_VERBOSE=1 git push origin main
          else
            echo "No changes to commit."
          fi
      
          echo "==[LFS FILES]=="
          git lfs ls-files || true
      
      # 8) (optionnel) Lister les fichiers modèles après le commit
      - name: List model files (post-commit)
        run: |
          ls -lh E3_E4_API_app/model || true


      # 9) Run tests
      - name: Run tests
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/E3_E4_API_app
          export API_USERNAME=${{ secrets.API_USERNAME }}
          export API_PASSWORD=${{ secrets.API_PASSWORD }}
          export API_TOKEN=${{ secrets.API_TOKEN }}
          export USER_LOU=${{ secrets.USER_LOU }}
          export USER_MAX=${{ secrets.USER_MAX }}
          pytest E3_E4_API_app/tests --maxfail=1 --disable-warnings -q

      # 10) Deploy to Render
      - name: Deploy to Render
        if: ${{ github.event_name == 'workflow_run' || github.event_name == 'workflow_dispatch' }}
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST "https://api.render.com/deploy/srv-d2nhlbe3jp1c73cmfa00" \
            -H "Authorization: Bearer $RENDER_API_KEY"
